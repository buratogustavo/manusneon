Quero criar um site simples, funcional e totalmente acessível (sem necessidade de login ou autenticação) que sirva como um MVP de um ERP para equipe de vendas, inicialmente com um único vendedor. O site será desenvolvido com Next.js no frontend e backend (API routes) e implantado diretamente no Vercel, com todas as rotas e funcionalidades prontas para uso imediato. O banco de dados será o PostgreSQL usando Prisma como ORM. Todo o código deve ser entregue pronto para clonar, instalar dependências e usar.

O sistema deve conter uma aba dedicada ao vendedor único, onde será possível cadastrar, visualizar e editar clientes, vendas e interações. Haverá também uma aba de painel (dashboard) com gráficos visuais, além de uma lógica para controle de comissões com base em critérios de fator de venda, metas por vendedor e alertas de acompanhamento com base no tempo sem contato com os clientes.

O cadastro de clientes deve conter os seguintes campos: nome, CNPJ, e-mail principal, telefone, setor, região, data da última compra, fator de venda da última compra e produtos comprados. Também é necessário exibir a condição de pagamento da última compra. As regiões devem ser categorizadas e exibidas com recurso visual de mapa (Google Maps ou Leaflet.js), permitindo entender onde está havendo melhor atuação.

As vendas devem registrar: cliente selecionado, produto vendido, preço, data da venda, fator de venda, condição de pagamento e o percentual de comissão gerado automaticamente com base nas regras definidas na planilha, como: fator acima de 1.2 gera 5%, acima de 1.1 gera 3%, abaixo de 1.1 gera 1%. As comissões devem ser exibidas individualmente e também em um painel geral de vendas e faturamento.

Todas as interações realizadas com os clientes devem ser registradas (ex: contato por e-mail, ligação, reunião) com data e descrição, atualizando automaticamente o campo de “última interação” daquele cliente. Essas interações terão uma aba específica no painel, com um resumo por período, gráfico de frequência e sugestões de clientes que estão sem interação há mais de 30 dias.

A base de dados deve conter as tabelas de clientes, produtos, vendas, interações e metas. Os produtos terão nome, código e preço. Como a empresa trabalha com produção sob demanda, não haverá controle de estoque. Também quero cadastrar metas por vendedor (mesmo sendo um único vendedor inicialmente), com valor de venda e fator médio desejado, para que isso seja comparado com o desempenho atual.

No painel principal, preciso acompanhar de forma visual os seguintes dados: total de faturamento, evolução mensal, funil de vendas com estágios (interessado, proposta, venda), produtos mais vendidos, desempenho por setor e região, além de alertas automáticos com clientes que devem ser contatados (ex: sem contato há 30 dias). Todos esses dados devem ser alimentados automaticamente com base nas vendas e interações cadastradas. Desejo também um gráfico de metas x atingido, com opção de filtrar por mês e ano.

Não será necessário autenticação para este MVP, e ele deve estar 100% funcional apenas sendo publicado no Vercel. Desejo que todas as rotas de API, configurações do Prisma, páginas do Next.js e estrutura de pastas estejam prontas e funcionando, sem que eu precise editar ou ajustar nada manualmente. Basta rodar npm install, configurar o .env com o banco e rodar. O painel inicial já deve estar estruturado, mesmo que com dados em branco, e as páginas de cadastro prontas para uso. O frontend pode usar TailwindCSS para estilização e Recharts para os gráficos. O foco é entregar uma versão navegável, simples, que já simule o funcionamento do sistema completo para testes, apresentações ou evolução futura.

Por fim, quero que seja incluída uma lógica automática que identifique quais clientes estão há mais de 30 dias sem contato ou compra e que eles sejam listados em uma seção chamada "Clientes para reativar", com botão para registrar nova interação. O site precisa estar bem estruturado, leve, com navegação fluida e interfaces limpas. Todo o projeto deve estar pronto para subir no Vercel com um botão de deploy, funcionando com banco PostgreSQL (pode sugerir Neon, Supabase ou Railway como provedores gratuitos compatíveis).